import { writeFileSync } from "fs";
import axios from "axios";
type CommandTree =
  | { type: "root"; children: Record<string, CommandTree> }
  | {
      type: "literal";
      children?: Record<string, CommandTree>;
      executable?: true;
      redirect?: string[];
    }
  | {
      type: "argument";
      parser: string;
      children?: Record<string, CommandTree>;
      properties?: any;
      executable?: true;
      redirect?: string[];
    };
// an object with keys being javascript keywords and values being a variable safe variant of the value
const keywords: Record<string, string> = {
  if: "_if",
  else: "_else",
  default: "_default",
  for: "_for",
  while: "_while",
  do: "_do",
  switch: "_switch",
  case: "_case",
  break: "_break",
  continue: "_continue",
  return: "_return",
  throw: "_throw",
  try: "_try",
  catch: "_catch",
  finally: "_finally",
  class: "_class",
  function: "_function",
  debugger: "_debugger",
  delete: "_delete",
  new: "_new",
  name: "_name",
  in: "_in",
};
function getSafeKey(k: string): string {
  return (keywords[k] || k).replace(/[^a-zA-Z0-9_]/g, "_");
}
function renderCommandTree(
  key: string,
  node: CommandTree,
  cmd: string[] = [],
  args: string[] = []
): string[] {
  if (node.type === "root") {
    return Object.entries(node.children!)
      .filter((x) => x[0] !== "execute")
      .flatMap(([key, value]) => {
        return renderCommandTree(key, value, [key]);
      });
  }
  if (node.type === "literal") {
    if (node.executable) {
      return [
        `export function ${getSafeKey(key)}(...args:[${args.join(
          ","
        )}]) {_raw(${JSON.stringify(cmd)},...args);}`,
        `export namespace ${getSafeKey(key)} {`,
        ...Object.entries(node.children! || {}).flatMap(([key, value]) => {
          return renderCommandTree(
            key,
            value,
            [...cmd, value.type === "literal" ? key : "%s"],
            [...args]
          );
        }),
        "}",
      ];
    } else {
      return [
        `export namespace ${getSafeKey(key)} {`,
        ...Object.entries(node.children! || {}).flatMap(([key, value]) => {
          return renderCommandTree(
            key,
            value,
            [...cmd, value.type === "literal" ? key : "%s"],
            [...args]
          );
        }),
        "}",
      ];
    }
  }
  if (node.type === "argument") {
    if (node.executable) {
      return [
        `export function ${getSafeKey(key)}(...args:[${[
          ...args,
          `${getSafeKey(key)}:Arg<${JSON.stringify(node.parser)}>`,
        ].join(",")}]) {_raw(${JSON.stringify(cmd)},...args);}`,
        // `export namespace ${getSafeKey(key)} {`,
        ...Object.entries(node.children! || {}).flatMap(([key2, value]) => {
          return renderCommandTree(
            key2,
            value,
            [...cmd, value.type === "literal" ? key : "%s"],
            [...args, `${getSafeKey(key)}:Arg<${JSON.stringify(node.parser)}>`]
          );
        }),
        // "}",
      ];
    } else {
      return [
        // `export namespace ${getSafeKey(key)} {`,
        ...Object.entries(node.children! || {}).flatMap(([key2, value]) => {
          return renderCommandTree(
            key2,
            value,
            [...cmd, value.type === "literal" ? key : "%s"],
            [...args, `${getSafeKey(key)}:Arg<${JSON.stringify(node.parser)}>`]
          );
        }),
        // "}",
      ];
    }
  }
  return [];
}
function render(data: CommandTree) {
  let result = ["// Generated by scripts/generate-bindings.ts\n"];
  const redirects = Object.entries(data.children!).filter(
    ([key, value]) => value.type === "literal" && value.redirect
  );
  redirects.forEach(([key, value]) => {
    delete data.children![key];
  });
  return [
    ...result,
    'import { _ } from "../mcfunction";',
    `import  {$execute} from "./execute";`,
    "export namespace c {",
    `type Arg<T> = {}`,
    `function _raw(template,...command:any[]){`,
    `let idx = 0;`,
    `//while(command.length && !command[command.length-1]) command.pop();`,
    `_._raw(template.map((v,i)=>v === "%s" ? command[idx++] : v).join(" "));`,
    `}`,
    `export const execute = $execute;`,
    ...renderCommandTree("root", data),
    ...redirects.flatMap(([key, value]) => {
      // @ts-ignore
      return `export const ${getSafeKey(key)} = c.${value.redirect![0]};`;
    }),
    "}",
  ];
}
axios
  .get(
    "https://raw.githubusercontent.com/Ersatz77/bedrock-data/master/generated/reports/commands.json"
  )
  .then((r) => r.data)
  .then((data) => {
    // @ts-ignore
    delete data.children["?"];

    // @ts-ignore
    // data.children.execute.children.run.redirect = Object.keys(data.children);
    const result = render(data as CommandTree);
    writeFileSync("./lib/mcf/commands.ts", result.join("\n"));
  });
